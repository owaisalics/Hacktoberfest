import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'getWays' function below.
     *
     * The function is expected to return a LONG_INTEGER.
     * The function accepts following parameters:
     *  1. INTEGER n
     *  2. LONG_INTEGER_ARRAY c
     */

    public static long getWays(int n, long arr[],int si,int ei,long storage[][]) {
       if(n<0){
      return 0;
       }
       if(n==0){
           storage[si][n]= 1;
           return 1;
       }
       if(si>ei){
           return 0;
       }
        
        if(storage[si][n]!=0){
            return storage[si][n];
        }
       long op1= getWays(n-(int)arr[si],arr,si,ei,storage);
       long op2= getWays(n,arr,si+1,ei,storage);

       storage[si][n]=op1+op2;
       return op1+op2;

    }
    public static long getWays(int n, List<Long> c) {
       long arr[]=new long[c.size()];
       for(int i=0;i<c.size();i++){
           long x=c.get(i);
           arr[i]=x;
       }
       long storage[][]=new long[c.size()+1][n+1];
       return getWays(n,arr,0,arr.length-1,storage);
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        String[] firstMultipleInput = bufferedReader.readLine().replaceAll("\\s+$", "").split(" ");

        int n = Integer.parseInt(firstMultipleInput[0]);

        int m = Integer.parseInt(firstMultipleInput[1]);

        List<Long> c = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .map(Long::parseLong)
            .collect(toList());

        // Print the number of ways of making change for 'n' units using coins having the values given by 'c'

        long ways = Result.getWays(n, c);

        bufferedWriter.write(String.valueOf(ways));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
